/*
### Простой поиск
Напишите функцию, которая принимает отсортированный массив с числами и число. Необходимо вернуть индекс числа, если оно есть в массиве. Иначе вернуть `-1`.
 */
// 1 способ

// O(n) - тк пробегаемся по массиву - но тк массив уже отсортирован воспользуемся бинарным поиском чтобы получить более высокую скорость
// обработки алгоритма - ускорять поиск того места где потенциально может быть число - см 2 способ
function search(array, target) {
    for (let i = 0; i < array.length; i++) {
        if (array[i] === target) {
            return i;
        }
    }

    return -1;
}

// "БИНАРНЫЙ ПОИСК":
// 2 способ
// O(log(n)) - половину масива каждый раз убираем как не нужную
/*
1) мин.значение = 1, макс.значение = 17, сравниваем 13 с этими значениями если 13 больше чем макс значение в массиве то числа в масиве нет или же
если 13 меньше 1 то его в массиве нет:
2) дальше пытаемся понять в каком секторе наше число? Будем дробить масив пополам и спрашивать относится ли наше число к левой части или
 правой -- так дробим каждую половинку на половинку и тд..
 */
function search(array, target) {
    let start = 0; // индекс
    let end = array.length - 1; // последнии индекс масива

    if (target < array[start] || target > array[end]) {
        return -1;
    }

    while (true) { // бесконечный цикл
        if (target === array[start]) { // если то число что ищем это 1 элемент в масиве - тогда вернем его индекс
            return start; // вернем его индекс
        }

        if (target === array[end]) {
            return end; // вернем его индекс
        }
        // проверяем есть ли разница(расстояние) между start и end - тк их будем изменять и если между ними нет пространства то
        // элементов которые мы ищем больше нет поэтому нам также надо вернуть -1
        if (end - start <= 1) { //значит между start и end уже нет никаких элементов
            return -1;
        }

        const middle = Math.floor((start + end) / 2); // ищем середину масива и округлим его..

        if (target > array[middle]) { // если число которое ищем > середины масива: array[middle] (например середина масива число "6")
            // --- то число которое ищем находится в правой части масива:
            start = middle + 1; // делаем старт ни от 1, а от 13
        } else if (target < array[middle]) {
            end = middle - 1;
        } else {
            return middle // те если target === array[middle]
        }
    }
}

console.log(search([1, 3, 6, 13, 17], 13)); // -> 3
console.log(search([1, 3, 6, 13, 17], 12)); // -> -1
