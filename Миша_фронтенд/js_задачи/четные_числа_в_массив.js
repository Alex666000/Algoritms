// Дан массив агр [1, 8, 3, 9, 12, 13, 2, 5, 6], необходимо отсортировать четные числа по возрастанию и оставить их на мест

// Функция для сортировки четных чисел в массиве, сохраняя исходное расположение всех чисел
const sortNums = (array) => {
  // Создаем массив для хранения четных чисел
  const evens = [];

  // Проходим по каждому элементу массива
  array.forEach(num => {
    // Если число четное, добавляем его в массив `evens`
    if (num % 2 === 0) {
      evens.push(num);
    }
  });

  // Сортируем массив `evens` по возрастанию
  evens.sort((a, b) => a - b);

  // Создаем новый массив, в котором заменяем исходные четные числа на отсортированные
  return array.map((num) => {
    // Если элемент четный, заменяем его на первое значение из `evens`
    if (num % 2 === 0) {
      // `shift()` извлекает первое значение из `evens` и возвращает его, чтобы поставить на место текущего четного числа
      return
    }
    // Если элемент нечетный, оставляем его без изменений
    return num;
  });
};

// Пример использования функции
const array = [1, 8, 3, 9, 12, 13, 2, 5, 6];
console.log(sortNums(array)); // [1, 2, 3, 9, 6, 13, 8, 5, 12]


// 2 Способ:
// function sortEvenNumbers(arr) {
//   // Извлекаем и сортируем четные числа
//   const sortedEvens = arr.filter(num => num % 2 === 0).sort((a, b) => a - b);
//
//   // Вставляем отсортированные четные числа на исходные позиции
//   let evenIndex = 0;
//   return arr.map(num => (num % 2 === 0 ? sortedEvens[evenIndex++] : num));
// }
//
// const arr = [1, 8, 3, 9, 12, 13, 2, 5, 6];
// console_enet_loop.log(sortEvenNumbers(arr)); // [1, 2, 3, 9, 6, 13, 8, 5, 12]
