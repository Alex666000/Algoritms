// 2) Дана строка состоящая из следующего набора скобок: (, ), {, }, [ и ]. Каждой открывающей скобке соответствует закрывающая, образуя пары.
//
//   Будем считать строку «правильной» если все скобки закрываются в нужном порядке, т.е:
// - для каждой открывающей есть закрывающая из той же пары;
// - скобки закрываются в правильном порядке.
// -пустая строка считается правильной.
//
//   Написать функцию, которая принимает на вход скобки и возвращает true или false

// isValid('()[]{}') // true
//
// isValid('{[]}') // true
//
// isValid('((()(())))') // true
//
// isValid('(]') // false
//
// isValid('([)]') // false
function isValidParentheses(s) {
  let openCount = 0;  // Переменная для отслеживания количества открытых скобок

  // Проходим по каждому символу в строке s
  for (let char of s) {
    // Если символ - это открывающая скобка
    if (char === "{" || char === "(" || char === "[") {
      openCount++;  // Увеличиваем счетчик открытых скобок
    }
    // Если символ - это закрывающая скобка
    else if (char === "}" || char === ")" || char === "]") {
      openCount--;  // Уменьшаем счетчик открытых скобок
    }
  }

  // Если в итоге счетчик открытых скобок не равен нулю, значит есть несоответствие
  if (openCount !== 0) {
    return false;  // Возвращаем false
  }

  // Если счетчик равен нулю, значит все скобки соответствуют друг другу
  return openCount === 0;
}
