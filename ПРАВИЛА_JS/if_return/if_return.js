 // когда в useState() пишем "колбек-прев", то внутри не "сетаем", а "ретурним" из колбека в useState()!!!!!!!!
// --------------------------------------------------------------------------------------------------------------------------------------
// Каждый "if" с "return" возвращает значение из внутренней функции, переданной в "setTimer" те в колбек useState()-a.
 // Вышли из "колбека" "useState()-a"
 // Это значение используется для обновления состояния "timer" - Возвращаем в setTimer
 const [timer, setTimer] = useState<number | undefined>(2);

 const onDecrease = () => {
   setTimer((prevTimer) => {
     if (prevTimer && prevTimer > 0) {
       return prevTimer - 1;
     }

     if (prevTimer === 0) {
       return prevTimer;
     }
   });
 };
 /*
 то есть вышли из колбека: (prevTimer) => {} вернув значение сюда: setTimer()
  */
 // --------------------------------------------------------------------------------------------------------------------------------------
// 2 -"Почему нельзя использовать "return" без функции?"
//  return предназначен для возвращения значения ТОЛЬКО из функции и завершения её выполнения. Если вы попробуете написать "return" вне
 //  функции это вызовет синтаксическую ошибку: "Illegal return statement"

/* if (true) {
   return "Что-то"; // Ошибка: Illegal return statement
 }*/

 // Что делать, если вы хотите "выйти" из "if", но не в контексте функции?
 // Если вам нужно завершить выполнение кода после проверки условия вне функции, можно использовать такие конструкции,
 // как "break" (в циклах) или "continue", или управлять выполнением с помощью логики.
 // Если вам нужно выйти из "if", это всегда должно быть в контексте функции. Если вы работаете вне функции,
 // используйте логику управления (например, флаги) или управляющие операторы ("break, continue, throw") в зависимости от ситуации.

 // Пример с break:
 for (let i = 0; i < 5; i++) {
   if (i === 3) {
     break; // Прерывает выполнение цикла
   }
   console.log(i);
 }
 // Результат: 0, 1, 2
// ==========================================================================================================================================
 // 3 - "return в React"
 // В React использование return внутри if в теле компонента — это распространённый способ условного рендера. Такой подход работает потому,
 // что React-компонент — это функция, и return в нём завершает выполнение этой функции и возвращает результат (обычно JSX-разметку).
/*
const MyComponent = ({ isLoading, data }) => {
    if (isLoading) {
        return <div>Загрузка...</div>; // Возвращает JSX и завершает выполнение функции
    }

    if (!data) {
        return <div>Нет данных</div>; // Возвращает JSX и завершает выполнение функции
    }

    return (
        <div>
            <h1>Данные:</h1>
            <p>{data}</p>
        </div>
    );
};
------------------------------------------------------------------------------------------------------------------------------------------
В циклах: не важно где ретурн всегда выход из непосредстенной функции внутри которой он происходит:
function isUnique(string) {
   const unique = new Set()

   for(let char of string) {
       if(unique.has(char)) {
           return false // завершает функцию - внутри чего бы не находился return
       } else {
           unique.add(char)
       }
   }

   return true // тоже выход из функции
}

console.log(isUnique('abcdef')); // -> true
console.log(isUnique('1234567')); // -> true
console.log(isUnique('abcABC')); // -> true
console.log(isUnique('abcadef')); // -> false

 */
