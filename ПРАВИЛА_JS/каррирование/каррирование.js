// Дано:
let nums = [1, 2, 3, 4, 23, 2]

// console.log(currledSum(3)(4)) // Должно быть 7

// Решение: каррирование возвращает функцию с цепочкой вызовов:
const currledSum = (x) => {
    return (c) => c + x
}
console.log(currledSum(3)(4))

/*
 - Каррирование (currying) — это техника преобразования функции, принимающей несколько аргументов, в последовательность функций, каждая из
которых принимает один аргумент.

Пример:
// Исходная функция, принимающая 2 аргумента
function add(a, b) {
  return a + b;
}

// Каррированная версия функции - каждая из которых принимает по 1 аргументу
function curriedAdd(a) {
  return function (b) {
    return a + b;
  };
}

// Использование
console.log(curriedAdd(5)(3)); // 8
============================================================================================================================================
Объяснение:
Функция "curriedAdd" принимает один аргумент "a" и возвращает новую функцию.
Внутренняя функция принимает второй аргумент "b" и возвращает их сумму "a + b".
Как это работает:

Вызов "curriedAdd(5)" создает функцию, "запоминая" значение a = 5 - замкнулось значение 5 - "классика замыкания"
Вызов этой функции с аргументом (3) завершает вычисление, возвращая 5 + 3 = 8.
 */

